#include<stdio.h>
#include<stdlib.h>
#include "couleur.h"
#include "structure.h"
#include "gestion_listes.h"



int presence_arrete_m(graphe_m *g,sommet x, sommet y)
{
    return g->a[x][y];
}

int verification_m(graphe_m *g, Ensemble *l)
{
    Ensemble curseur1,curseur2;
    curseur1=*l;             //on pointe sur la tete de liste 
    if(curseur1->suivant)    // si elle contient plus d'un élément
    {
        curseur2=NULL;
        while(curseur1 && !curseur2 )      //on doit verifier que chaque sommet n'a pas d'arc entre eux
        {
            curseur2=curseur1->suivant;   // on pointe l'element aprés curseur1
            while(curseur2 && !presence_arrete_m(g,curseur1->st,curseur2->st) ) // on verifie que cet element n'est pas voisin de curseur1
            {
                curseur2=curseur2->suivant; // on pointe sur l'element qui suit
            }
            curseur1=curseur1->suivant; // en fin de boucle curseur1 pointera sur position-1
        }

        return curseur1==NULL; // si le curseur1 a parcouru toute tout l'ensemble le sous graphe est desert
    }
    else return 1;



}

/***************************************************************************************************/
/*                                                                                                 */
/* fonction qui prend en entrée un graphe avec liste d'adjacence , un sommet x et un sommet y      */
/* se place sur la liste de voisins de x                                                           */
/* et test si chaque sommet de la liste est y                                                      */
/* retourne 1 si y est present dans la liste 0 sinon                                               */
/* complexite  en O( d+(x) )                                                                       */
/*                                                                                                 */
/***************************************************************************************************/

int presence_arrete_l(graphe_l *g, sommet x , sommet y)
{

    liste tmp;
    tmp=g->a[x];
    while(tmp && tmp->st!=y)
    {
        tmp=tmp->suivant;
    }
    if(tmp)
        return 1;
    else
        return 0;
}

/***************************************************************************************************/
/*                                                                                                 */
/* fonction qui prend en entrée un graphe avec liste d'adjacence et un ensemble de sommet          */
/* et qui va test si chaque sommet de l'ensemble n'est pas voisins des autres sommet de l'ensemble */
/* retourne 1 si un sommet est voisin d'un autre , 0 sinon                                         */
/* complexite  :                                                                                   */
/*                                                                                                 */
/***************************************************************************************************/

int verification_l(graphe_l  *g , Ensemble *l)
{
    Ensemble curseur1,curseur2;
    curseur1=*l;             //on pointe sur la tete de liste 
    if(curseur1->suivant)    // si elle contient plus d'un élément
    {
        curseur2=NULL;
        while(curseur1 && !curseur2 )      //on doit verifier que chaque sommet n'a pas d'arc entre eux
        {
            curseur2=curseur1->suivant;   // on pointe l'element aprés curseur1
            while(curseur2 && !presence_arrete_l(g,curseur1->st,curseur2->st) ) // on verifie que cet element n'est pas voisin de curseur1
            {
                curseur2=curseur2->suivant; // on pointe sur l'element qui suit
            }
            curseur1=curseur1->suivant; // en fin de boucle curseur1 pointera sur position-1
        }

        return curseur1==NULL; // si le curseur1 a parcouru toute tout l'ensemble le sous graphe est desert
    }
    else return 1;
}

/**************************************************************************************************/
/*                                                                                                */
/*   fonction qui prend en entréé un graphe_l et un ensemble de sommet                            */
/*   ajoute un sommet a l'ensemble qui n'est pas deja present dans l'ensemble                     */
/*   teste si ce nouvel ensemble est un sous graphe desert                                        */
/*   retourne 1 si le nouvel ensemble est un sous graphe desert 0 sinon                           */
/*                                                                                                */
/**************************************************************************************************/

int maximalite(graphe_l *g, Ensemble *l)
{

    int i,test;
    Ensemble curseur;
    curseur=*l;
    test=0;
    int tab[n_max]={0};
    for(i=0;i<g->n;i++) //tableau de marquage initialiser a 0
    {
        tab[i]=0;
    }
    while(curseur) //on rajoute les sommet present dans le tableau de marquage pour ne pas les revisiter
    {
        tab[curseur->st]=1;
        curseur=curseur->suivant;
    }
    for(i=0;i<g->n && !test;i++) // pour chaque sommet
    {
        if(!tab[i]) // si il ne fait pas partie de l'ensemble de depart
        {
            printf("on va ajouter %d pour maximalite \n",i);
            ajouter_element_queue(l,i); // ajoute le sommet a l'ensemble
            tab[i]=1;
            if( !(test=verification_l(g,l)) )//si le sommet rajouté ne forme pas un sous graphe desert
            {
                printf("ca ne forme pas un sous graphe desert on supprime %d \n",i);
                afficher_ensemble(l);
                supprimer_queue_ensemble(l); //on supprime le sommet et on essaye les sommet suivant
                afficher_ensemble(l);
                tab[i]=0;
            }
        }
    }
    return test;
}



Ensemble calcul_maximal(graphe_l *g, int x)
{


    Ensemble tete_liste;

    tete_liste=NULL;

    ajouter_element_ensemble(&tete_liste,x);

    int i;
    int tab[n_max]={0};
    for(i=0;i<g->n;i++) //tableau de marquage initialiser a 0
    {
        tab[i]=0;
    }
    tab[x]=1;

    for(i=0;i<g->n;i++)
    {
        if(i!=x && !tab[i])
        {
            ajouter_element_queue(&tete_liste,i); // ajoue le sommet a l'ensemble
            tab[i]=1;
            if( !verification_l(g,&tete_liste) )
            {
                tab[i]=0;
                supprimer_queue_ensemble(&tete_liste);
            }
        }
    }

    return tete_liste;
}

void afficher_tab( int *tab, int fin)
{
    int i;
    for(i=0;i<fin;i++)
    {
        printf("%d:%d ",i,tab[i]);
    }
    printf("\n");
}


int verif(liste *l , int *tab)
{
    liste tmp;
    tmp=*l;
    while(tmp && !tab[tmp->st])
    {
        tmp=tmp->suivant;
    }
    
    if(!tmp)
        return 1;
    else
        return 0;


}


void maximum_rec(graphe_l *g,int profondeur,int *profondeurmax,sommet x,Ensemble *l, Ensemble *final, int *pinterdit,int * ppresent,int nbpossible)
{


    Ensemble tmp;
    liste voisins_sommet;

    // afficher_ensemble(l);
    for(x=x+1;x<g->n ;x++) // alors je lui ajoute un sommet et je "descend"
    {

      //    printf("on tente d'ajouter %d et t[%d]=%d \n",x,x,pinterdit[x]);
        // printf("profondeur %d %d> %d\n",profondeur,((profondeur+nbpossible)+1),*profondeurmax);
       //  afficher_tab(ppresent,g->n);
        if(!pinterdit[x] && ( (profondeur+nbpossible)> (*profondeurmax ) ) ) //si le sommet n'est pas marque
        {

         //   printf("on a %d sommet ,il reste %d sommetpossible ,pf max = %d \n",profondeur,nbpossible,*profondeurmax);
            if( verif(&g->a[x],ppresent) ) //verification_m(gm,l) ) // si c'est un desert on "descend" BESOIN TABLEAU DES SOMMETS PRESENTS indicer les sommets de marquage a ++ au lieu de 1
            {
                //      printf("ajout %d \n",x);
                ajouter_element_queue(l,x);

                //  afficher_ensemble(l);

                (profondeur)++;
                pinterdit[x]++;
                if(pinterdit[x]==1 )
                    nbpossible--;
                ppresent[x]=1;

                voisins_sommet=g->a[x];
                while(voisins_sommet)
                {
                    pinterdit[voisins_sommet->st]++;
                    if( pinterdit[voisins_sommet->st]==1 )
                        nbpossible--;
                    voisins_sommet=voisins_sommet->suivant;
                }

                //   printf("l'ensemble est un sous graphe desert \n");
                if( (profondeur)>(*profondeurmax) ) // si on trouve un sous graphe plus grand que ceux d'avant
                {
                    if(!final)
                        supprimer_ensemble(final);
                    (*final)=NULL;
                    tmp=*l;
                    while(tmp)
                    {
                        ajouter_element_queue(final,tmp->st);
                        //pmarquage[tmp->st]=1;
                        tmp=tmp->suivant;
                    }

                    couleur("33");printf("nouvel ensensemble max : %d sommets \n",profondeur);couleur("0");

                    printf("\n");
                    afficher_ensemble(final);


                    (*profondeurmax)=(profondeur);

                }

                maximum_rec(g,profondeur,profondeurmax,x,l,final,pinterdit,ppresent,nbpossible);
                if(ppresent[x])
                {
                    profondeur--;
                    supprimer_queue_ensemble(l);
                    ppresent[x]=0;
                    pinterdit[x]--;
                    nbpossible++;
                    voisins_sommet=g->a[x];
                    while(voisins_sommet)
                    {
                        pinterdit[voisins_sommet->st]--;
                        if( !pinterdit[voisins_sommet->st] &&  (voisins_sommet->st)>x )
                            nbpossible++;
                        voisins_sommet=voisins_sommet->suivant;
                    }

                }

              //  afficher_ensemble(l);
            }
            else
            {
                pinterdit[x]++;
                if(pinterdit[x]==1)
                    nbpossible--;

            }
            /*  else// on "remonte"
                {

            //  printf("l'ensemble n'est pas un sous graphe desert \n");

            (profondeur)--;

            // supprimer_queue_ensemble(l);
            // pmarquage[x]=0;

            //    afficher_ensemble(l);
            // printf("-%d",x);
            }*/

        }


    }
    // couleur("31");printf("sorite for \n");couleur("0");
    // afficher_ensemble(l);
}


int maximum(graphe_l *g)
{

    int profondeurtmp,profondeurmax;
    int sommet_interdit[n_max],sommet_present[n_max];
    int *pinterdit,*ppresent;
    sommet x;
    int i,nbpossible;
    Ensemble l=NULL;
    Ensemble final=NULL;
    profondeurmax=0;

    liste tmp;

    for(x=0;x<g->n;x++)
    {
        sommet_interdit[x]=0;
        sommet_present[x]=0;
    }

    pinterdit=sommet_interdit;
    ppresent=sommet_present;


    for(x=0;x<g->n;x++) //on part du sommet x
    {
        couleur("31");printf("on part de %d",x);couleur("0");
        printf("\n");
        ajouter_element_ensemble(&l,x);
        pinterdit[x]=1;
        ppresent[x]=1;
        tmp=g->a[x];
        nbpossible=g->n-1;
        while(tmp)
        {
            pinterdit[tmp->st]=1;
            nbpossible--;
            tmp=tmp->suivant;
        }
        profondeurtmp=1;
        maximum_rec(g,profondeurtmp,&profondeurmax,x,&l,&final,pinterdit,ppresent,nbpossible);
        for(i=0;i<g->n;i++)
        {
            pinterdit[i]=0;
            ppresent[i]=0;
        }

        supprimer_ensemble(&l);
        l=NULL;
    }

    couleur("31");printf("MAXIMUM TROUVE \n");couleur("0");
    couleur("33"),printf(" %d sommets \n",profondeurmax);
    afficher_ensemble(&final);couleur("0");
    printf("\n");

    supprimer_ensemble(&final);

    return 1;//maximum_rec(g,pmarquage,profondeur);
}

/*
int maximum_rec_sans_coupure(graphe_l *g, int x)
{
    
    //marque le sommet 

    for(x=0;x<g->n;x++) // pour chaque sommet existant
    {
        //si on peut l'ajouter 
        maximum_rec_sans_coupure(g,x); // on continue a "descendre"
    }

}
*/



void maximum_incomplete(graphe_d *g)
{
    int i,degre_max,indice,nb_sommet,nb_supprime;
    int marque[n_max];
    liste tmp=NULL;
    Ensemble l=NULL;
    degre_max=indice=nb_sommet=nb_supprime=0;

    for(i=0;i<g->n;i++) // initialise le tableau des sommet enleve a 0
        marque[i]=0;

    while((nb_sommet+nb_supprime)<g->n)
    {


        for(i=0;i<g->n;i++) //parcours les degree
        {
            if(!marque[i] )
            {
                if(g->degre[i] > degre_max) //cherche le degre le plus grand et le memorise
                {
                    indice=i;
                    degre_max=g->degre[i];
                }
                if(!g->degre[i] && !marque[i]) // si le degre est 0 et que le sommet n'a pas encore etait ajouté
                {
                    ajouter_element_ensemble(&l,i); //on ajoute le sommet isolé
                    nb_sommet++;
                    marque[i]=1;
                }
            }
        }
      
        //suppression du sommet ayant le plus grand degre

        marque[indice]=1; // marque le sommet comme supprime
        tmp=g->a[indice];
        while(tmp) //parcours la liste du sommet a supprimer
        {
            supprimer_arete_l(&g->a[tmp->st],indice); //supprime le sommet de la liste de chacun de ses voisins
            g->degre[tmp->st]--;
            tmp=tmp->suivant;
        }
        supprimer_liste(&g->a[indice]);
        nb_supprime++;
        g->degre[indice]=0;
        degre_max=0;
     /*   for(i=0;i<g->n;i++)
        {
            printf("[%d]",i);
            afficher_liste(&g->a[i]);

        }*/

    }
    printf("ON A TROUVE : \n");
    afficher_ensemble(&l);






}

void copie_graphe_l(graphe_l *gl ,graphe_d *gd)
{

    int i;
    liste tmp;

    gd->n=gl->n;
    for(i=0;i<gl->n;i++)
        gd->degre[i]=0;

    for(i=0;i<gl->n;i++)
    {
        tmp=gl->a[i];
        while(tmp)
        {
            ajouter_arete_l(&gd->a[i],tmp->st);
            gd->degre[i]++;
            ajouter_arete_l(&gd->a[tmp->st],i);
            tmp=tmp->suivant;
        }
    }
}

